import lingo/pegcode/driver;


ArExpr ::= ArSum, ArMult, ArInt;
	ArSum(lhs : ArExpr, rhs : ArExpr);
	ArMult(lhs : ArExpr, rhs : ArExpr);
	ArInt(x : int);

ar2s (e : ArExpr) -> string {
	switch (e : ArExpr) {
		ArSum(lhs, rhs): {
			"(" + ar2s(lhs) + " " + ar2s(rhs) + " +)";
		};
		ArMult(lhs, rhs): {
			"(" + ar2s(lhs) + " " + ar2s(rhs) + " *)";
		};
		ArInt(x): { i2s(x) };
	}
}

ar2i (e : ArExpr) -> int {
	switch (e : ArExpr) {
		ArSum(lhs, rhs): {
			ar2i(lhs) + ar2i(rhs);
		};
		ArMult(lhs, rhs): {
			ar2i(lhs) * ar2i(rhs);
		};
		ArInt(x): {x};
	}
}


s2ar(str : string) -> ArExpr {
	e_gr = "#include education/task1/arith.lingo";
	parsic(
		compilePegGrammar(e_gr), 
		str,
		SemanticActions(setTree(defaultPegActions.t, "createArInt", \s -> ArInt(s2i(s[0]))))
	)
}


main() -> int {
	ar = s2ar("(  (( 4 + 5 ) * ( 18  + 3) ) + 000)   ");
	
	println("Arithmetic result: " + i2s(ar2i(ar)));
	
	println("Postfix notation: " + ar2s(ar));

	0;
}
